repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/russhwolf/multiplatform-settings' }
    maven { url "https://jitpack.io" }
}

import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude("META-INF/ktor-http.kotlin_module")
        exclude("META-INF/kotlinx-io.kotlin_module")
        exclude("META-INF/atomicfu.kotlin_module")
        exclude("META-INF/ktor-utils.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-io.kotlin_module")
        exclude("META-INF/ktor-client-json.kotlin_module")
        exclude("META-INF/ktor-client-logging.kotlin_module")
        exclude("META-INF/ktor-client-core.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-core.kotlin_module")
        exclude("META-INF/ktor-client-serialization.kotlin_module")
        exclude("META-INF/ktor-http-cio.kotlin_module")
        exclude("META-INF/kotlinx-serialization-runtime.kotlin_module")
    }

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    task fatFrameworkDebug(type: FatFrameworkTask) {
        // The fat framework must have the same base name as the initial frameworks.
        baseName = "core"

        // The default destination directory is '<build directory>/fat-framework'.
//        destinationDir = file("$buildDir/fat-framework/debug")
        destinationDir = file("/${buildDir}/ios-framework")

        // Specify the frameworks to be merged.
        from(
                targets.ios.binaries.getFramework("DEBUG")
//            targets.ios64.binaries.getFramework("DEBUG")
        )
    }

//    task fatFrameworkRelease(type: FatFrameworkTask) {
//        baseName = "app"
//        destinationDir = file("${rootProject.rootDir}/iosApp")
//        from(targets.ios64.binaries.getFramework("RELEASE"))
//    }

    sourceSets {
        def ktorVersion = "1.2.2"
        def kotlinVersion = "1.3.41"
        def kotlinCoroutineVersion = "1.3.0-RC"//""1.2.2" //"1.3.0-M2"
        def kodeinVersion = "6.3.2"
        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinCoroutineVersion"
                api "io.ktor:ktor-client-core:$ktorVersion"
                api "io.ktor:ktor-client-json:$ktorVersion"
                api "io.ktor:ktor-client-serialization:$ktorVersion"
                api "io.ktor:ktor-client-logging:$ktorVersion"
                api "org.kodein.di:kodein-di-erased:$kodeinVersion"
            }
        }
        commonTest {
            dependencies {
            }
        }
        androidMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
                api "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
                implementation 'androidx.appcompat:appcompat:1.0.2'
                implementation 'androidx.core:core-ktx:1.0.2'


                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"
                api "io.ktor:ktor-client-android:$ktorVersion"
                api "io.ktor:ktor-client-core-jvm:$ktorVersion"
                api "io.ktor:ktor-client-json-jvm:$ktorVersion"
                api "io.ktor:ktor-client-okhttp:$ktorVersion"
                api "io.ktor:ktor-client-logging-jvm:$ktorVersion"
                api "io.ktor:ktor-client-serialization-jvm:$ktorVersion"
                api "com.squareup.okhttp3:okhttp:4.0.1"
                api "ch.qos.logback:logback-classic:1.2.3"

            }
        }
        androidTest {
            dependencies {
//                implementation kotlin('test')
//                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                api "io.ktor:ktor-client-ios:$ktorVersion"
                api "io.ktor:ktor-client-core-native:$ktorVersion"
                api "io.ktor:ktor-client-json-native:$ktorVersion"
                api "io.ktor:ktor-client-logging-native:$ktorVersion"
                api "io.ktor:ktor-client-serialization-native:$ktorVersion"

            }
        }
        iosTest {
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

kotlin.targets.matching { it.platformType.name == "native" }.all {
    compilations.all {
        cinterops.all {
            configurations[dependencyConfigurationName].attributes.attribute(
                    Usage.USAGE_ATTRIBUTE,
                    objects.named(Usage, "kotlin-api")
            )
        }
    }
}


// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).

//
//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask
//
//    doLast {
//        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
//        def targetDir = getProperty('configuration.build.dir')
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'app.framework/**'
//            include 'app.framework.dSYM'
//        }
//    }
//}

//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//    final def framework = kotlin.targets.ios.binaries.getFramework("common", mode)
//
//    inputs.property "mode", mode
//    dependsOn framework.linkTask
//
//    from { framework.outputFile.parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//tasks.build.dependsOn packForXCode